"use client";

import React, { Suspense } from "react";
import Image from "next/image";
import { useSearchParams } from "next/navigation";
import { models, Model } from "@/data/models"; // Assuming models data is accessible here

function IframeContent() {
  const searchParams = useSearchParams();
  const modelIdParam = searchParams.get("modelId");
  const clothingImageUrl = searchParams.get("imageUrl");

  // Convert modelId string to number
  const modelIdNum = modelIdParam ? parseInt(modelIdParam, 10) : null;

  // Find the selected model based on the ID
  const selectedModel = models.find((m) => m.id === modelIdNum);

  // Basic error handling/loading states
  if (!modelIdNum || !clothingImageUrl) {
    return (
      <div className="p-4 text-center text-red-500">Missing parameters.</div>
    );
  }

  if (!selectedModel) {
    return <div className="p-4 text-center text-red-500">Model not found.</div>;
  }

  // --- Placeholder for Virtual Try-On Logic ---
  // Here, you would typically:
  // 1. Fetch the actual image data if needed (if URLs aren't direct links).
  // 2. Call your virtual try-on algorithm/API/library, passing the model
  //    image (selectedModel.imageUrl) and the clothing image (clothingImageUrl).
  // 3. Get the resulting image URL or data from the try-on process.

  // For now, we'll just display the model and clothing item.
  // Replace this section with your actual try-on result display.
  const tryOnResultImageUrl = selectedModel.imageUrl; // Placeholder: Show model image for now

  return (
    <div className="w-full h-full flex flex-col items-center justify-center p-4">
      <h2 className="text-xl font-semibold mb-4">Try-On Result</h2>
      <div className="relative w-[400px] h-[600px] border rounded-lg overflow-hidden">
        {/*
                This is where the final combined image should be displayed.
                You might overlay the clothing onto the model image,
                or display the image generated by your try-on service.
            */}
        <Image
          src={tryOnResultImageUrl} // Use the actual result image URL here
          alt={`Model ${selectedModel.name} wearing the item`}
          fill
          sizes="400px"
          className="object-contain" // Or object-cover depending on needs
        />
        {/* Example of overlaying clothing (very basic) - requires specific styling */}
        {/* <div className="absolute inset-0 flex items-center justify-center">
                <Image
                    src={decodeURIComponent(clothingImageUrl)}
                    alt="Clothing item overlay"
                    width={150} // Adjust size as needed
                    height={200} // Adjust size as needed
                    className="object-contain opacity-80" // Adjust styling
                />
            </div> */}
      </div>
      <p className="mt-2 text-sm text-gray-600">Model: {selectedModel.name}</p>
      {/* Optionally display the clothing item source below */}
      {/* <Image src={decodeURIComponent(clothingImageUrl)} alt="Clothing Item Source" width={50} height={50} className="mt-2"/> */}

      {/* Add more details or controls if needed */}
    </div>
  );
}

// Wrap with Suspense because useSearchParams needs it
export default function TryOnIframePage() {
  return (
    // Add a basic loading fallback for Suspense
    <Suspense
      fallback={<div className="p-4 text-center">Loading try-on...</div>}
    >
      <IframeContent />
    </Suspense>
  );
}
